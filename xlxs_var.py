# -*- coding: utf8 -*-
import telebot
import openpyxl
from openpyxl.utils import get_column_letter
import re
from telebot import types
import datetime


bot = telebot.TeleBot('TOKEN')

def RASPISANIE(number, day, Name_day):
    raspisanie = []
    path_to_file = 'timesheet.xlsx'
    search_text = number.upper()
    wb = openpyxl.load_workbook(path_to_file)  # –ì—Ä—É–∑–∏–º –Ω–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
    sheets_list = wb.sheetnames  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    sheet_active = wb[sheets_list[day]]  # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º
    row_max = sheet_active.max_row  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    # print(type(row_max))
    column_max = sheet_active.max_column  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    row_min = 1  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    column_min = 1  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞
    while column_min <= column_max:
        row_min_min = row_min
        row_max_max = row_max
        while row_min_min <= row_max_max:
            row_min_min = str(row_min_min)
            word_column = get_column_letter(column_min)
            word_column = str(word_column)
            word_cell = word_column + row_min_min
            data_from_cell = sheet_active[word_cell].value
            data_from_cell = str(data_from_cell)
            regular = search_text
            result = re.findall(regular, data_from_cell)
            if len(result) > 0:
                cell = word_column
            row_min_min = int(row_min_min)
            row_min_min = row_min_min + 1
        column_min = column_min + 1
    sheet = wb.active
    para = ["1 –ü–∞—Ä–∞",
            "2 –ü–∞—Ä–∞",
            "3 –ü–∞—Ä–∞",
            "4 –ü–∞—Ä–∞",
            "5 –ü–∞—Ä–∞",
            "6 –ü–∞—Ä–∞",
            "7 –ü–∞—Ä–∞"]
    calls = ["8.00-9.20",
             "9.30-10.50",
             "11.10-12.30",
             "12.50-14.10",
             "14.30-15.50",
             "16.10-17.30",
             "17.40-19.00"]
    diapaz = [4, 5, 6, 7, 8, 9, 10]

    raspisanie.append(f'–ì—Ä—É–ø–ø–∞ - {search_text}')
    raspisanie.append(f'‚úÖ{Name_day}‚úÖ')
    for i in range(0, 7):
        if sheet[cell + str(diapaz[i])].value == None:
            sheet[cell + str(diapaz[i])].value = "–ü–∞—Ä—ã –Ω–µ—Ç"
        raspisanie.append(f'‚è∞{calls[i]}: {para[i]} - üìï{sheet[cell + str(diapaz[i])].value}')
    return raspisanie

def WEEKEND_today(number, Name_day):
    search_text = number.upper()
    raspisanie = []
    raspisanie.append(f'–ì—Ä—É–ø–ø–∞ - {search_text}')
    raspisanie.append(f'‚úÖ{Name_day}‚úÖ')
    raspisanie.append(f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üò¥ üçª')
    return raspisanie
def WEEKEND_tommorow(number, Name_day):
    search_text = number.upper()
    raspisanie = []
    raspisanie.append(f'–ì—Ä—É–ø–ø–∞ - {search_text}')
    raspisanie.append(f'‚úÖ{Name_day}‚úÖ')
    raspisanie.append(f'–ó–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üò¥ üçª')
    return raspisanie
# -----------------------------------------------------------------------------------------------------------------------
number = ''
day = ''
group_list = ['11–ì–î', '11–£–ú–î', '11–°–•', '21–ì–î', '21–ì–°–∫', '22–ì–î', '31–ì–î', '31–ì–°–∫',
              '32–ì–î', '41–ì–î', '42–ì–î', '21–ú', '31–ú', '32–ú', '42–ú', '21–°–•', '31–°–•', '21–ö–õ',
              '21–ü', '11–ö–õ', '11–ü', '11–ò–°', '11–ú–ú–†', '11–†–ú', '12–†–ú', '22 –ò–°', '21–ò–°', '21–†–ú',
              '22–†–ú', '21–ö–°–ö', '31–ü–ò', '32–ü–ò', '31–†–ú', '32–†–ú', '31–ö–°–ö', '41–ö–°–ö', '41–ü–ò', '42–ü–ò'
              ]

def keys(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã')
    keyboard.row('–ü–æ–º–æ—â—å')
    keyboard.row('/start')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç  {}! \n'
                                      '–ï—Å–ª–∏ —Ç—ã —É—á–∏—à—å—Å—è –≤ –ö–ò–ì–ú ‚Ññ23, —Ç–æ —ç—Ç–æ—Ç –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n'
                                      '–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É - –Ω–∞–∂–º–∏—Ç–µ /group.\n'
                                      '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ /timetable.\n'
                                      '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏—Ç–µ /help'.format(message.chat.first_name),
                                      reply_markup=keyboard
                     )




@bot.message_handler(commands=['start'])
def start_command(message):
    keys(message)

@bot.message_handler(commands=['help'])
def help_command(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton(
            '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É', url='telegram.me/<YOUR TG>'
  )
    )
    bot.send_message(
        message.chat.id,
        '1) –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É (–Ω–µ –≤–∞–∂–Ω–æ –±–æ–ª—å—à–∏–º–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏).\n' +
        '2) –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.\n' +
        '3) –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.\n' +
        '4) –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –¥–µ–Ω—å –≤—ã—à–µ.',
        reply_markup=keyboard
    )
def error(message):
    bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É /group\n'
                                      '\n'
                                      '\n'
                                      '/help\n')


@bot.message_handler(commands=['group'])
def group_command(message):
    group_com = bot.send_message(message.from_user.id, "{}, –∏–∑ –∫–∞–∫–æ–π –≤—ã –≥—Ä—É–ø–ø—ã?".format(message.chat.first_name))
    bot.register_next_step_handler(group_com, number_group)
def number_group(message):
    global number
    number = message.text
    if message.text == '/start':
        start_command(message)
    elif message.text.upper() in group_list:
        msg = (message.text).upper()
        group = (f'–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {msg}')
        day_number(message)
    else:
        bot.send_message(message.from_user.id, '–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        group_command(message)

@bot.message_handler(commands=['timetable'])
def day_number(message):
    if number == '':
        error(message)
    else:
        keyboard = types.InlineKeyboardMarkup()
        key_monday = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='monday')
        keyboard.add(key_monday)

        key_tuesday = types.InlineKeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫', callback_data='tuesday')
        keyboard.add(key_tuesday)

        key_wednesday = types.InlineKeyboardButton(text='–°—Ä–µ–¥–∞', callback_data='wednesday')
        keyboard.add(key_wednesday)

        key_thursday = types.InlineKeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥', callback_data='thursday')
        keyboard.add(key_thursday)

        key_friday = types.InlineKeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞', callback_data='friday')
        keyboard.add(key_friday)

        key_today = types.InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='today')
        key_tomorrow = types.InlineKeyboardButton(text='–ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow')
        keyboard.add(key_today, key_tomorrow)

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=keyboard)


        rasp_sms = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏ —Ä–∞—Å–ø–∏—Å–Ω–∞–∏–µ –ø–æ—è—Ç–≤–∏—Ç—Å—è —Ç—É—Ç')
        global id_sms
        id_sms = rasp_sms.id
def msg_out(message,mes):
    message_output = bot.edit_message_text(chat_id=message.chat.id, message_id=id_sms, text='\n'.join(mes))

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    weekDays = ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ–µ–Ω—å–µ")
    now = datetime.date.today()
    tomorrow = datetime.date.today() + datetime.timedelta(days=1)

    if call.data == "today":
        day = now.weekday()
        Name_day = weekDays[day]
        if day == 5:
            mes = WEEKEND_today(number, Name_day)
            msg_out(call.message, mes)
        elif day == 6:
            mes = WEEKEND_today(number, Name_day)
            msg_out(call.message, mes)
        else:
            mes = RASPISANIE(number, day, Name_day)
            msg_out(call.message, mes)
    elif call.data == "tomorrow":
        day = int(tomorrow.weekday())
        Name_day = weekDays[day]
        if day == 5:
            mes = WEEKEND_tommorow(number, Name_day)
            msg_out(call.message, mes)
        elif day == 6:
            mes = WEEKEND_tommorow(number, Name_day)
            msg_out(call.message, mes)
        else:
            mes = RASPISANIE(number, day, Name_day)
            msg_out(call.message, mes)
    elif call.data == "monday":
        day = 0
        Name_day = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        mes = RASPISANIE(number, day, Name_day)
        msg_out(call.message, mes)
    elif call.data == "tuesday":
        day = 1
        Name_day = '–í—Ç–æ—Ä–Ω–∏–∫'
        mes = RASPISANIE(number, day, Name_day)
        msg_out(call.message, mes)
    elif call.data == "wednesday":
        day = 2
        Name_day = '–°—Ä–µ–¥–∞'
        mes = RASPISANIE(number, day, Name_day)
        msg_out(call.message, mes)
    elif call.data == "thursday":
        day = 3
        Name_day = '–ß–µ—Ç–≤–µ—Ä–≥'
        mes = RASPISANIE(number, day, Name_day)
        msg_out(call.message, mes)
    elif call.data == "friday":
        day = 4
        Name_day = '–ü—è—Ç–Ω–∏—Ü–∞'
        mes = RASPISANIE(number, day, Name_day)
        msg_out(call.message, mes)

@bot.message_handler(content_types=['text'])
def callback_worker(message):
    if message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        day_number(message)
    elif message.text == "–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã":
        group_command(message)
    elif message.text == "–ü–æ–º–æ—â—å":
        help_command(message)


bot.polling(none_stop=True, interval=0)

if __name__ == '__main__':
    bot.polling(none_stop=True)